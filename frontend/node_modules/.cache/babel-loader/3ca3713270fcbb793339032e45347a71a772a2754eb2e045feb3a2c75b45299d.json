{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useCallback, useEffect, useState } from 'react';\nimport StationContext from \"../context/StationsContext\";\nimport StationService from '../services/StationService';\nimport SlotService from '../services/SlotService';\nimport { useSlots } from './useSlots';\nexport function useStations() {\n  _s();\n  const {\n    stations,\n    setStations\n  } = useContext(StationContext);\n  // // const [oneStation, setOneStation] = useState({});\n  // // const { slots, setSlots } = useSlots();\n  // // const [isCorrect, setIsCorrect] = useState(false);\n  // // const [stationSlots, setStationSlots] = useState([]);\n  // // useEffect(() => {\n  // //     const station = { 'station_id': oneStation.id };\n  // //     SlotService.getAllSlots(station)\n  // //         .then(({ data, status }) => {\n  // //             if (status === 200) {\n  // //                 setStationSlots(data);\n  // //                 console.log(data);\n  // //             }\n  // //         })\n  // //         .catch(e => console.error(e));\n  // // }, [oneStation]);\n\n  // const useOneStation = useCallback((slug) => {\n  //     console.log(slug);\n  //     StationService.getOneStation(slug)\n  //         .then(({data}) => {\n  //             setOneStation(data);\n  //             console.log(data);\n  //         })\n  //         .catch(e => console.error(e));\n  // }, [oneStation]);\n\n  // const useAddStation = useCallback(data => {\n  //     let station_data = {\n  //         \"station\":{\n  //             direction: data.direction ,\n  //             location: data.location,\n  //             name: data.name,\n  //             img: data.img\n  //         }\n\n  //     //    \"slot\":{\n  //     //         num_slot: data.slots\n  //     //    }\n  //     }\n\n  //     StationService.createStation(data,data.slots)\n  //         .then(({ data, status }) => {\n  //             if (status === 200) {\n  //                 // toast.success('Station created successfully');\n  //                 setStations([...stations, data]);\n  //                 setIsCorrect(true);\n  //                 setTimeout(() => { setIsCorrect(false); }, 1000);\n  //             }\n  //         })\n  //         .catch(e => {\n  //             console.error(e);\n  //             // toast.error('Create station error');\n  //         });\n  // }, []);\n\n  // const useUpdateStation = useCallback((slug, data) => {\n  //     let station_data = {\n  //         \"station\":{\n  //             direction: data.direction ,\n  //             location: data.location,\n  //             name: data.name,\n  //             img: data.img\n  //         },\n  //        \"slot\":{\n  //             num_slot: data.num_slot\n  //        }\n  //     }\n\n  //     StationService.updateStation(slug, data)\n  //         .then(({ data, status }) => {\n  //             if (status === 200) {\n  //                 let old_stations = [...stations];\n  //                 const index = old_stations.findIndex(station => station.slug === slug);\n  //                 if (index !== -1) {\n  //                     old_stations[index] = data;\n  //                     setStations(old_stations);\n  //                 }\n  //                 // toast.success('Station updated successfully');\n  //                 setIsCorrect(true);\n  //                 setTimeout(() => { setIsCorrect(false); }, 1000);\n  //             }\n  //         })\n  //         .catch(e => {\n  //             console.error(e);\n  //             // toast.error('Create station error');\n  //         });\n  //         setIsCorrect(true);\n  //         setTimeout(() => { setIsCorrect(false); }, 1000);\n  //     }, []);\n\n  // const useDeleteStation = (slug) => {\n  //     StationService.deleteStation(slug)\n  //     .then(({ data, status }) => {\n  //         if (status === 200) {\n  //             // toast.success(data.data);\n  //             setStations(stations.filter(station => station.slug !== slug));\n  //         }\n  //     })\n  //     .catch(e => console.error(e));\n  // }\n  // isCorrect,, useOneStation, oneStation,setOneStation, setStationSlots, stationSlots,useAddStation, useDeleteStation, useUpdateStation\n  return {\n    stations,\n    setStations\n  };\n}\n_s(useStations, \"/rCuqhaoqPBc8GLVEISlUaTYp/U=\");","map":{"version":3,"names":["useContext","useCallback","useEffect","useState","StationContext","StationService","SlotService","useSlots","useStations","_s","stations","setStations"],"sources":["/app/src/hooks/useStations.jsx"],"sourcesContent":["\r\nimport {useContext, useCallback, useEffect, useState} from 'react';\r\nimport StationContext from \"../context/StationsContext\";\r\nimport StationService from '../services/StationService';\r\nimport SlotService from '../services/SlotService';\r\nimport { useSlots } from './useSlots';\r\n\r\nexport function useStations() {\r\n    const {stations, setStations} = useContext(StationContext);\r\n    // // const [oneStation, setOneStation] = useState({});\r\n    // // const { slots, setSlots } = useSlots();\r\n    // // const [isCorrect, setIsCorrect] = useState(false);\r\n    // // const [stationSlots, setStationSlots] = useState([]);\r\n    // // useEffect(() => {\r\n    // //     const station = { 'station_id': oneStation.id };\r\n    // //     SlotService.getAllSlots(station)\r\n    // //         .then(({ data, status }) => {\r\n    // //             if (status === 200) {\r\n    // //                 setStationSlots(data);\r\n    // //                 console.log(data);\r\n    // //             }\r\n    // //         })\r\n    // //         .catch(e => console.error(e));\r\n    // // }, [oneStation]);\r\n\r\n    // const useOneStation = useCallback((slug) => {\r\n    //     console.log(slug);\r\n    //     StationService.getOneStation(slug)\r\n    //         .then(({data}) => {\r\n    //             setOneStation(data);\r\n    //             console.log(data);\r\n    //         })\r\n    //         .catch(e => console.error(e));\r\n    // }, [oneStation]);\r\n\r\n    \r\n    // const useAddStation = useCallback(data => {\r\n    //     let station_data = {\r\n    //         \"station\":{\r\n    //             direction: data.direction ,\r\n    //             location: data.location,\r\n    //             name: data.name,\r\n    //             img: data.img\r\n    //         }\r\n\r\n    //     //    \"slot\":{\r\n    //     //         num_slot: data.slots\r\n    //     //    }\r\n    //     }\r\n\r\n    //     StationService.createStation(data,data.slots)\r\n    //         .then(({ data, status }) => {\r\n    //             if (status === 200) {\r\n    //                 // toast.success('Station created successfully');\r\n    //                 setStations([...stations, data]);\r\n    //                 setIsCorrect(true);\r\n    //                 setTimeout(() => { setIsCorrect(false); }, 1000);\r\n    //             }\r\n    //         })\r\n    //         .catch(e => {\r\n    //             console.error(e);\r\n    //             // toast.error('Create station error');\r\n    //         });\r\n    // }, []);\r\n\r\n    // const useUpdateStation = useCallback((slug, data) => {\r\n    //     let station_data = {\r\n    //         \"station\":{\r\n    //             direction: data.direction ,\r\n    //             location: data.location,\r\n    //             name: data.name,\r\n    //             img: data.img\r\n    //         },\r\n    //        \"slot\":{\r\n    //             num_slot: data.num_slot\r\n    //        }\r\n    //     }\r\n\r\n    //     StationService.updateStation(slug, data)\r\n    //         .then(({ data, status }) => {\r\n    //             if (status === 200) {\r\n    //                 let old_stations = [...stations];\r\n    //                 const index = old_stations.findIndex(station => station.slug === slug);\r\n    //                 if (index !== -1) {\r\n    //                     old_stations[index] = data;\r\n    //                     setStations(old_stations);\r\n    //                 }\r\n    //                 // toast.success('Station updated successfully');\r\n    //                 setIsCorrect(true);\r\n    //                 setTimeout(() => { setIsCorrect(false); }, 1000);\r\n    //             }\r\n    //         })\r\n    //         .catch(e => {\r\n    //             console.error(e);\r\n    //             // toast.error('Create station error');\r\n    //         });\r\n    //         setIsCorrect(true);\r\n    //         setTimeout(() => { setIsCorrect(false); }, 1000);\r\n    //     }, []);\r\n\r\n    // const useDeleteStation = (slug) => {\r\n    //     StationService.deleteStation(slug)\r\n    //     .then(({ data, status }) => {\r\n    //         if (status === 200) {\r\n    //             // toast.success(data.data);\r\n    //             setStations(stations.filter(station => station.slug !== slug));\r\n    //         }\r\n    //     })\r\n    //     .catch(e => console.error(e));\r\n    // }\r\n// isCorrect,, useOneStation, oneStation,setOneStation, setStationSlots, stationSlots,useAddStation, useDeleteStation, useUpdateStation\r\n    return { stations, setStations}\r\n}"],"mappings":";AACA,SAAQA,UAAU,EAAEC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAClE,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,QAAQ,QAAQ,YAAY;AAErC,OAAO,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM;IAACC,QAAQ;IAAEC;EAAW,CAAC,GAAGX,UAAU,CAACI,cAAc,CAAC;EAC1D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACJ;EACI,OAAO;IAAEM,QAAQ;IAAEC;EAAW,CAAC;AACnC;AAACF,EAAA,CAzGeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}